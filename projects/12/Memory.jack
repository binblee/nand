// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;
    static int heapBase;
    static int heapSize;
    static int heapBoundary;

    /** Initializes the class. */
    function void init() {
        // for peek and poke
        let ram = 0;
        // freeList = heapBase
        let heapBase = 2048;
        let heap = heapBase;
        let freeList = heap;
        // freeList.next = 0
        let heap[0] = 0;
        // freeList.size = heapSize
        let heapSize = 14334;
        let heap[1] = heapSize;
        let heapBoundary = heapBase + heapSize + 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, free_block;
        let block = 0;
        let free_block = freeList;
        // search freeList using best-fit or first-fit heuristics
        //     to obtain a segment with segment.size â‰¥ size + 2
        while ( (~(free_block = 0)) & (block = 0) ){
            if (~(free_block[1] < (size + 2))){
                // update the freeList and the fields of block 
                //     to account for the allocation 
                let free_block[1] = free_block[1] - size - 2;
                // block = base address of the found space 
                let block = free_block + free_block[1] + 2;
                let block[0] = 0;
                let block[1] = size;
                return block + 2;
            }else{
                let free_block = free_block[0];
            }
        }
        // if no such segment is found, return failure (or attempt defragmentation)
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array obj) {
        var Array block, free_block;
        let block = obj - 2;
        if ( ~(block < heapBase) 
                & (block[0] = 0)
                & (block[1] > 0) 
                & (~((block + 2 + block[1]) > heapBoundary))){
            // find tail of freeList
            let free_block = freeList;
            while( ~(free_block[0] = 0) ){
                let free_block = free_block[0];
            }
            let free_block[0] = block;
            return;
        }
        do Output.printString("Invalid object, do nothing");
        do Output.println();
        return;
    }    
}
