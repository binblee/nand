// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    //  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 RAM begin
    //  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1 RAM end (0x3FFF)
    //  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0 Screen memory begin (0x4000)
    //  1  0  1  1  1  1  1  1  1  1  1  1  1  1  1 Screen memory end (0x5FFF)
    //  1  1  0  0  0  0  0  0  0  0  0  0  0  0  0 Keyboard memory (0x6000)
    // Short:
    //  0  0  ...  RAM
    //  0  1  ...  RAM
    //  1  0  ...  Screen
    //  1  1  ...  Keyboard, false (address == 0x6000 for keyboard, 
    //                              address > 0x6000 always return 0

    DMux4Way(in=load, sel=address[13..14], a=loadRAM0, b=loadRAM1, c=loadScreen, d=na);
    Or(a=loadRAM0, b=loadRAM1, out=loadRAM);
    // RAM
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=ram);
 
    // Screen
    Screen(in=in, load=loadScreen, address=address[0..12], out=screen);
 
    // Keyboard
    Or8Way(in=address[0..7], out=addrBits0to7);
    Or8Way(in[5..7]=false, in[0..4]=address[8..12], out=addrBits8to12);
    Or(a=addrBits0to7, b=addrBits8to12, out=addrBits0to12);
    Keyboard(out=keyboard);
    Mux16(a=keyboard, b=false, sel=addrBits0to12, out=keyboardOrBeyond);

    Mux4Way16(a=ram, b=ram, c=screen, d=keyboardOrBeyond, sel=address[13..14], out=out);
}